/*
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.mapmatch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.mapmatch.ApiClient;
/**
 * Detailed information about a continuous part of a matched track.
 */
@JsonPropertyOrder({
  MatchedPath.JSON_PROPERTY_DISTANCE,
  MatchedPath.JSON_PROPERTY_START_TIME,
  MatchedPath.JSON_PROPERTY_START_TRACK_POSITION_INDEX,
  MatchedPath.JSON_PROPERTY_END_TIME,
  MatchedPath.JSON_PROPERTY_END_TRACK_POSITION_INDEX,
  MatchedPath.JSON_PROPERTY_ROUTE_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T11:58:08.355728377Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class MatchedPath {
  public static final String JSON_PROPERTY_DISTANCE = "distance";
  private Integer distance;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private OffsetDateTime startTime;

  public static final String JSON_PROPERTY_START_TRACK_POSITION_INDEX = "startTrackPositionIndex";
  private Integer startTrackPositionIndex;

  public static final String JSON_PROPERTY_END_TIME = "endTime";
  private OffsetDateTime endTime;

  public static final String JSON_PROPERTY_END_TRACK_POSITION_INDEX = "endTrackPositionIndex";
  private Integer endTrackPositionIndex;

  public static final String JSON_PROPERTY_ROUTE_ID = "routeId";
  private UUID routeId;

  public MatchedPath() { 
  }

  public MatchedPath distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * The distance [m] of the complete matched path.
   * minimum: 0
   * @return distance
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDistance() {
    return distance;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public MatchedPath startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of this path defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
   * @return startTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public MatchedPath startTrackPositionIndex(Integer startTrackPositionIndex) {
    this.startTrackPositionIndex = startTrackPositionIndex;
    return this;
  }

  /**
   * The index in the list of trackPositions of the start position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.
   * minimum: 0
   * @return startTrackPositionIndex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getStartTrackPositionIndex() {
    return startTrackPositionIndex;
  }


  @JsonProperty(JSON_PROPERTY_START_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTrackPositionIndex(Integer startTrackPositionIndex) {
    this.startTrackPositionIndex = startTrackPositionIndex;
  }


  public MatchedPath endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of this path defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
   * @return endTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public MatchedPath endTrackPositionIndex(Integer endTrackPositionIndex) {
    this.endTrackPositionIndex = endTrackPositionIndex;
    return this;
  }

  /**
   * The index in the list of trackPositions of the end position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.
   * minimum: 0
   * @return endTrackPositionIndex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getEndTrackPositionIndex() {
    return endTrackPositionIndex;
  }


  @JsonProperty(JSON_PROPERTY_END_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTrackPositionIndex(Integer endTrackPositionIndex) {
    this.endTrackPositionIndex = endTrackPositionIndex;
  }


  public MatchedPath routeId(UUID routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * The ID of the route for this path. It is available only if it is requested by MatchedTrackResults.ROUTE_ID. This route ID can be used as an input parameter in a calculateRoute request at the Routing API and is valid for 12 hours.
   * @return routeId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getRouteId() {
    return routeId;
  }


  @JsonProperty(JSON_PROPERTY_ROUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRouteId(UUID routeId) {
    this.routeId = routeId;
  }


  /**
   * Return true if this MatchedPath object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchedPath matchedPath = (MatchedPath) o;
    return Objects.equals(this.distance, matchedPath.distance) &&
        Objects.equals(this.startTime, matchedPath.startTime) &&
        Objects.equals(this.startTrackPositionIndex, matchedPath.startTrackPositionIndex) &&
        Objects.equals(this.endTime, matchedPath.endTime) &&
        Objects.equals(this.endTrackPositionIndex, matchedPath.endTrackPositionIndex) &&
        Objects.equals(this.routeId, matchedPath.routeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, startTime, startTrackPositionIndex, endTime, endTrackPositionIndex, routeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchedPath {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startTrackPositionIndex: ").append(toIndentedString(startTrackPositionIndex)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endTrackPositionIndex: ").append(toIndentedString(endTrackPositionIndex)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `distance` to the URL query string
    if (getDistance() != null) {
      joiner.add(String.format("%sdistance%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `startTime` to the URL query string
    if (getStartTime() != null) {
      joiner.add(String.format("%sstartTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `startTrackPositionIndex` to the URL query string
    if (getStartTrackPositionIndex() != null) {
      joiner.add(String.format("%sstartTrackPositionIndex%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartTrackPositionIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endTime` to the URL query string
    if (getEndTime() != null) {
      joiner.add(String.format("%sendTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEndTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endTrackPositionIndex` to the URL query string
    if (getEndTrackPositionIndex() != null) {
      joiner.add(String.format("%sendTrackPositionIndex%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEndTrackPositionIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `routeId` to the URL query string
    if (getRouteId() != null) {
      joiner.add(String.format("%srouteId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRouteId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

