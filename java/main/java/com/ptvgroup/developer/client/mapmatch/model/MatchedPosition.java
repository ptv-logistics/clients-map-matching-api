/*
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.mapmatch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.mapmatch.model.LowEmissionZoneDescriptors;
import com.ptvgroup.developer.client.mapmatch.model.SegmentAttributes;
import com.ptvgroup.developer.client.mapmatch.model.SegmentLocationDescriptors;
import com.ptvgroup.developer.client.mapmatch.model.Toll;
import com.ptvgroup.developer.client.mapmatch.model.Warning;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.mapmatch.ApiClient;
/**
 * Represents the successful match of a position on the map including the matched segment and the deviation to the input position. For unsuccessful matches an empty object is returned.
 */
@JsonPropertyOrder({
  MatchedPosition.JSON_PROPERTY_LATITUDE,
  MatchedPosition.JSON_PROPERTY_LONGITUDE,
  MatchedPosition.JSON_PROPERTY_SEGMENT_GEOMETRY,
  MatchedPosition.JSON_PROPERTY_MATCH_DISTANCE,
  MatchedPosition.JSON_PROPERTY_ANGLE_DIFFERENCE,
  MatchedPosition.JSON_PROPERTY_SEGMENT_LOCATION_DESCRIPTORS,
  MatchedPosition.JSON_PROPERTY_SEGMENT_ATTRIBUTES,
  MatchedPosition.JSON_PROPERTY_LOW_EMISSION_ZONES,
  MatchedPosition.JSON_PROPERTY_TOLL,
  MatchedPosition.JSON_PROPERTY_WARNINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T11:58:08.355728377Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class MatchedPosition {
  public static final String JSON_PROPERTY_LATITUDE = "latitude";
  private Double latitude;

  public static final String JSON_PROPERTY_LONGITUDE = "longitude";
  private Double longitude;

  public static final String JSON_PROPERTY_SEGMENT_GEOMETRY = "segmentGeometry";
  private String segmentGeometry;

  public static final String JSON_PROPERTY_MATCH_DISTANCE = "matchDistance";
  private Integer matchDistance;

  public static final String JSON_PROPERTY_ANGLE_DIFFERENCE = "angleDifference";
  private Double angleDifference;

  public static final String JSON_PROPERTY_SEGMENT_LOCATION_DESCRIPTORS = "segmentLocationDescriptors";
  private SegmentLocationDescriptors segmentLocationDescriptors;

  public static final String JSON_PROPERTY_SEGMENT_ATTRIBUTES = "segmentAttributes";
  private SegmentAttributes segmentAttributes;

  public static final String JSON_PROPERTY_LOW_EMISSION_ZONES = "lowEmissionZones";
  private List<LowEmissionZoneDescriptors> lowEmissionZones;

  public static final String JSON_PROPERTY_TOLL = "toll";
  private Toll toll;

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<Warning> warnings;

  public MatchedPosition() { 
  }

  public MatchedPosition latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude value in degrees (WGS84/EPSG:4326) from south to north. This refers to the coordinates on the segment to which the input position matches.
   * minimum: -90
   * maximum: 90
   * @return latitude
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getLatitude() {
    return latitude;
  }


  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public MatchedPosition longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude value in degrees (WGS84/EPSG:4326) from west to east. This refers to the coordinates on the segment to which the input position matches.
   * minimum: -180
   * maximum: 180
   * @return longitude
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getLongitude() {
    return longitude;
  }


  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public MatchedPosition segmentGeometry(String segmentGeometry) {
    this.segmentGeometry = segmentGeometry;
    return this;
  }

  /**
   * The geometry of the matched segment as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).
   * @return segmentGeometry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_GEOMETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSegmentGeometry() {
    return segmentGeometry;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_GEOMETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentGeometry(String segmentGeometry) {
    this.segmentGeometry = segmentGeometry;
  }


  public MatchedPosition matchDistance(Integer matchDistance) {
    this.matchDistance = matchDistance;
    return this;
  }

  /**
   * The straight-line distance (Euclidean distance) [m] from the input position to the matching segment.
   * minimum: 0
   * @return matchDistance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCH_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMatchDistance() {
    return matchDistance;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchDistance(Integer matchDistance) {
    this.matchDistance = matchDistance;
  }


  public MatchedPosition angleDifference(Double angleDifference) {
    this.angleDifference = angleDifference;
    return this;
  }

  /**
   * The difference in degrees \\[Â°\\] between the angle of the travel direction and the angle of the matching segment. This value is always smaller than the straight angle.
   * minimum: 0
   * maximum: 180
   * @return angleDifference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANGLE_DIFFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getAngleDifference() {
    return angleDifference;
  }


  @JsonProperty(JSON_PROPERTY_ANGLE_DIFFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAngleDifference(Double angleDifference) {
    this.angleDifference = angleDifference;
  }


  public MatchedPosition segmentLocationDescriptors(SegmentLocationDescriptors segmentLocationDescriptors) {
    this.segmentLocationDescriptors = segmentLocationDescriptors;
    return this;
  }

  /**
   * Get segmentLocationDescriptors
   * @return segmentLocationDescriptors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_LOCATION_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SegmentLocationDescriptors getSegmentLocationDescriptors() {
    return segmentLocationDescriptors;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_LOCATION_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentLocationDescriptors(SegmentLocationDescriptors segmentLocationDescriptors) {
    this.segmentLocationDescriptors = segmentLocationDescriptors;
  }


  public MatchedPosition segmentAttributes(SegmentAttributes segmentAttributes) {
    this.segmentAttributes = segmentAttributes;
    return this;
  }

  /**
   * Get segmentAttributes
   * @return segmentAttributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SegmentAttributes getSegmentAttributes() {
    return segmentAttributes;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentAttributes(SegmentAttributes segmentAttributes) {
    this.segmentAttributes = segmentAttributes;
  }


  public MatchedPosition lowEmissionZones(List<LowEmissionZoneDescriptors> lowEmissionZones) {
    this.lowEmissionZones = lowEmissionZones;
    return this;
  }

  public MatchedPosition addLowEmissionZonesItem(LowEmissionZoneDescriptors lowEmissionZonesItem) {
    if (this.lowEmissionZones == null) {
      this.lowEmissionZones = new ArrayList<>();
    }
    this.lowEmissionZones.add(lowEmissionZonesItem);
    return this;
  }

  /**
   * Describes the low emission zones of a road section.
   * @return lowEmissionZones
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LowEmissionZoneDescriptors> getLowEmissionZones() {
    return lowEmissionZones;
  }


  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowEmissionZones(List<LowEmissionZoneDescriptors> lowEmissionZones) {
    this.lowEmissionZones = lowEmissionZones;
  }


  public MatchedPosition toll(Toll toll) {
    this.toll = toll;
    return this;
  }

  /**
   * Get toll
   * @return toll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Toll getToll() {
    return toll;
  }


  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToll(Toll toll) {
    this.toll = toll;
  }


  public MatchedPosition warnings(List<Warning> warnings) {
    this.warnings = warnings;
    return this;
  }

  public MatchedPosition addWarningsItem(Warning warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of warnings concerning the validity of the result.
   * @return warnings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Warning> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<Warning> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this MatchedPosition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchedPosition matchedPosition = (MatchedPosition) o;
    return Objects.equals(this.latitude, matchedPosition.latitude) &&
        Objects.equals(this.longitude, matchedPosition.longitude) &&
        Objects.equals(this.segmentGeometry, matchedPosition.segmentGeometry) &&
        Objects.equals(this.matchDistance, matchedPosition.matchDistance) &&
        Objects.equals(this.angleDifference, matchedPosition.angleDifference) &&
        Objects.equals(this.segmentLocationDescriptors, matchedPosition.segmentLocationDescriptors) &&
        Objects.equals(this.segmentAttributes, matchedPosition.segmentAttributes) &&
        Objects.equals(this.lowEmissionZones, matchedPosition.lowEmissionZones) &&
        Objects.equals(this.toll, matchedPosition.toll) &&
        Objects.equals(this.warnings, matchedPosition.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latitude, longitude, segmentGeometry, matchDistance, angleDifference, segmentLocationDescriptors, segmentAttributes, lowEmissionZones, toll, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchedPosition {\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    segmentGeometry: ").append(toIndentedString(segmentGeometry)).append("\n");
    sb.append("    matchDistance: ").append(toIndentedString(matchDistance)).append("\n");
    sb.append("    angleDifference: ").append(toIndentedString(angleDifference)).append("\n");
    sb.append("    segmentLocationDescriptors: ").append(toIndentedString(segmentLocationDescriptors)).append("\n");
    sb.append("    segmentAttributes: ").append(toIndentedString(segmentAttributes)).append("\n");
    sb.append("    lowEmissionZones: ").append(toIndentedString(lowEmissionZones)).append("\n");
    sb.append("    toll: ").append(toIndentedString(toll)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `latitude` to the URL query string
    if (getLatitude() != null) {
      joiner.add(String.format("%slatitude%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLatitude()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `longitude` to the URL query string
    if (getLongitude() != null) {
      joiner.add(String.format("%slongitude%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLongitude()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `segmentGeometry` to the URL query string
    if (getSegmentGeometry() != null) {
      joiner.add(String.format("%ssegmentGeometry%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSegmentGeometry()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `matchDistance` to the URL query string
    if (getMatchDistance() != null) {
      joiner.add(String.format("%smatchDistance%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMatchDistance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `angleDifference` to the URL query string
    if (getAngleDifference() != null) {
      joiner.add(String.format("%sangleDifference%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAngleDifference()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `segmentLocationDescriptors` to the URL query string
    if (getSegmentLocationDescriptors() != null) {
      joiner.add(getSegmentLocationDescriptors().toUrlQueryString(prefix + "segmentLocationDescriptors" + suffix));
    }

    // add `segmentAttributes` to the URL query string
    if (getSegmentAttributes() != null) {
      joiner.add(getSegmentAttributes().toUrlQueryString(prefix + "segmentAttributes" + suffix));
    }

    // add `lowEmissionZones` to the URL query string
    if (getLowEmissionZones() != null) {
      for (int i = 0; i < getLowEmissionZones().size(); i++) {
        if (getLowEmissionZones().get(i) != null) {
          joiner.add(getLowEmissionZones().get(i).toUrlQueryString(String.format("%slowEmissionZones%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `toll` to the URL query string
    if (getToll() != null) {
      joiner.add(getToll().toUrlQueryString(prefix + "toll" + suffix));
    }

    // add `warnings` to the URL query string
    if (getWarnings() != null) {
      for (int i = 0; i < getWarnings().size(); i++) {
        if (getWarnings().get(i) != null) {
          joiner.add(getWarnings().get(i).toUrlQueryString(String.format("%swarnings%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

