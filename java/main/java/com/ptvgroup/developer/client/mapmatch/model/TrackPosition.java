/*
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.mapmatch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.mapmatch.ApiClient;
/**
 * Describes a position which belongs to a track with additional track related attributes.
 */
@JsonPropertyOrder({
  TrackPosition.JSON_PROPERTY_LATITUDE,
  TrackPosition.JSON_PROPERTY_LONGITUDE,
  TrackPosition.JSON_PROPERTY_HEADING,
  TrackPosition.JSON_PROPERTY_DISTANCE_FROM_PREVIOUS_POSITION,
  TrackPosition.JSON_PROPERTY_TIMESTAMP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T11:58:08.355728377Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class TrackPosition {
  public static final String JSON_PROPERTY_LATITUDE = "latitude";
  private Double latitude;

  public static final String JSON_PROPERTY_LONGITUDE = "longitude";
  private Double longitude;

  public static final String JSON_PROPERTY_HEADING = "heading";
  private Double heading;

  public static final String JSON_PROPERTY_DISTANCE_FROM_PREVIOUS_POSITION = "distanceFromPreviousPosition";
  private Double distanceFromPreviousPosition;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  public TrackPosition() { 
  }

  public TrackPosition latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude value in degrees (WGS84/EPSG:4326) from south to north of the position to be matched.
   * minimum: -90
   * maximum: 90
   * @return latitude
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Double getLatitude() {
    return latitude;
  }


  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public TrackPosition longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude value in degrees (WGS84/EPSG:4326) from west to east of the position to be matched.
   * minimum: -180
   * maximum: 180
   * @return longitude
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Double getLongitude() {
    return longitude;
  }


  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public TrackPosition heading(Double heading) {
    this.heading = heading;
    return this;
  }

  /**
   * The direction of travel defined by a clockwise angle with respect to north in degrees \\\\[°\\\\], e.g., 0° is north, 90° is east, 180° is south, and 270° is west.
   * minimum: 0
   * maximum: 360
   * @return heading
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getHeading() {
    return heading;
  }


  @JsonProperty(JSON_PROPERTY_HEADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeading(Double heading) {
    this.heading = heading;
  }


  public TrackPosition distanceFromPreviousPosition(Double distanceFromPreviousPosition) {
    this.distanceFromPreviousPosition = distanceFromPreviousPosition;
    return this;
  }

  /**
   * The travel distance [m] from the previous position to this position. This value can be provided to improve the quality of the track matching.
   * minimum: 0
   * @return distanceFromPreviousPosition
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTANCE_FROM_PREVIOUS_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getDistanceFromPreviousPosition() {
    return distanceFromPreviousPosition;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE_FROM_PREVIOUS_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistanceFromPreviousPosition(Double distanceFromPreviousPosition) {
    this.distanceFromPreviousPosition = distanceFromPreviousPosition;
  }


  public TrackPosition timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339) when the input position was passed. This value has to be set either for all input positions or none. If set they must have an ascending order. A time zone has to be set explicitly.
   * @return timestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  /**
   * Return true if this TrackPosition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackPosition trackPosition = (TrackPosition) o;
    return Objects.equals(this.latitude, trackPosition.latitude) &&
        Objects.equals(this.longitude, trackPosition.longitude) &&
        Objects.equals(this.heading, trackPosition.heading) &&
        Objects.equals(this.distanceFromPreviousPosition, trackPosition.distanceFromPreviousPosition) &&
        Objects.equals(this.timestamp, trackPosition.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latitude, longitude, heading, distanceFromPreviousPosition, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackPosition {\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    distanceFromPreviousPosition: ").append(toIndentedString(distanceFromPreviousPosition)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `latitude` to the URL query string
    if (getLatitude() != null) {
      joiner.add(String.format("%slatitude%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLatitude()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `longitude` to the URL query string
    if (getLongitude() != null) {
      joiner.add(String.format("%slongitude%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLongitude()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `heading` to the URL query string
    if (getHeading() != null) {
      joiner.add(String.format("%sheading%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHeading()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `distanceFromPreviousPosition` to the URL query string
    if (getDistanceFromPreviousPosition() != null) {
      joiner.add(String.format("%sdistanceFromPreviousPosition%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistanceFromPreviousPosition()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimestamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

