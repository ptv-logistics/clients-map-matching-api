/*
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.mapmatch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.mapmatch.ApiClient;
/**
 * Describes the attributes of a segment. Not all attributes are available for all segments.
 */
@JsonPropertyOrder({
  SegmentAttributes.JSON_PROPERTY_BRIDGE,
  SegmentAttributes.JSON_PROPERTY_TUNNEL,
  SegmentAttributes.JSON_PROPERTY_RAMP,
  SegmentAttributes.JSON_PROPERTY_FRONTAGE,
  SegmentAttributes.JSON_PROPERTY_PAVED,
  SegmentAttributes.JSON_PROPERTY_REQUIRES_FOUR_WHEEL_DRIVE,
  SegmentAttributes.JSON_PROPERTY_PRIVATELY_MANAGED,
  SegmentAttributes.JSON_PROPERTY_PUBLIC_ACCESS,
  SegmentAttributes.JSON_PROPERTY_PARKING_LOT,
  SegmentAttributes.JSON_PROPERTY_PRIORITY_ROAD,
  SegmentAttributes.JSON_PROPERTY_BUILT_UP_AREA,
  SegmentAttributes.JSON_PROPERTY_SPEED_LIMIT,
  SegmentAttributes.JSON_PROPERTY_ROAD_CATEGORY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T11:58:08.355728377Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class SegmentAttributes {
  public static final String JSON_PROPERTY_BRIDGE = "bridge";
  private Boolean bridge;

  public static final String JSON_PROPERTY_TUNNEL = "tunnel";
  private Boolean tunnel;

  public static final String JSON_PROPERTY_RAMP = "ramp";
  private Boolean ramp;

  public static final String JSON_PROPERTY_FRONTAGE = "frontage";
  private Boolean frontage;

  public static final String JSON_PROPERTY_PAVED = "paved";
  private Boolean paved;

  public static final String JSON_PROPERTY_REQUIRES_FOUR_WHEEL_DRIVE = "requiresFourWheelDrive";
  private Boolean requiresFourWheelDrive;

  public static final String JSON_PROPERTY_PRIVATELY_MANAGED = "privatelyManaged";
  private Boolean privatelyManaged;

  public static final String JSON_PROPERTY_PUBLIC_ACCESS = "publicAccess";
  private Boolean publicAccess;

  public static final String JSON_PROPERTY_PARKING_LOT = "parkingLot";
  private Boolean parkingLot;

  public static final String JSON_PROPERTY_PRIORITY_ROAD = "priorityRoad";
  private Boolean priorityRoad;

  public static final String JSON_PROPERTY_BUILT_UP_AREA = "builtUpArea";
  private Boolean builtUpArea;

  public static final String JSON_PROPERTY_SPEED_LIMIT = "speedLimit";
  private Integer speedLimit;

  public static final String JSON_PROPERTY_ROAD_CATEGORY = "roadCategory";
  private Integer roadCategory;

  public SegmentAttributes() { 
  }

  public SegmentAttributes bridge(Boolean bridge) {
    this.bridge = bridge;
    return this;
  }

  /**
   * Indicates that the segment is part of a bridge.
   * @return bridge
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRIDGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getBridge() {
    return bridge;
  }


  @JsonProperty(JSON_PROPERTY_BRIDGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBridge(Boolean bridge) {
    this.bridge = bridge;
  }


  public SegmentAttributes tunnel(Boolean tunnel) {
    this.tunnel = tunnel;
    return this;
  }

  /**
   * Indicates that the segment is part of a tunnel.
   * @return tunnel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TUNNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTunnel() {
    return tunnel;
  }


  @JsonProperty(JSON_PROPERTY_TUNNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTunnel(Boolean tunnel) {
    this.tunnel = tunnel;
  }


  public SegmentAttributes ramp(Boolean ramp) {
    this.ramp = ramp;
    return this;
  }

  /**
   * Indicates that the segment is part of a ramp.
   * @return ramp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRamp() {
    return ramp;
  }


  @JsonProperty(JSON_PROPERTY_RAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRamp(Boolean ramp) {
    this.ramp = ramp;
  }


  public SegmentAttributes frontage(Boolean frontage) {
    this.frontage = frontage;
    return this;
  }

  /**
   * Indicates that the segment is part of a frontage road.
   * @return frontage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRONTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getFrontage() {
    return frontage;
  }


  @JsonProperty(JSON_PROPERTY_FRONTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrontage(Boolean frontage) {
    this.frontage = frontage;
  }


  public SegmentAttributes paved(Boolean paved) {
    this.paved = paved;
    return this;
  }

  /**
   * Indicates that the segment is part of a road with a solid surface (made of concrete, asphalt, cobblestone etc.).
   * @return paved
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPaved() {
    return paved;
  }


  @JsonProperty(JSON_PROPERTY_PAVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaved(Boolean paved) {
    this.paved = paved;
  }


  public SegmentAttributes requiresFourWheelDrive(Boolean requiresFourWheelDrive) {
    this.requiresFourWheelDrive = requiresFourWheelDrive;
    return this;
  }

  /**
   * Indicates that the segment is part of a road which is only suitable for vehicles with four-wheel drive.
   * @return requiresFourWheelDrive
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_FOUR_WHEEL_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresFourWheelDrive() {
    return requiresFourWheelDrive;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_FOUR_WHEEL_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresFourWheelDrive(Boolean requiresFourWheelDrive) {
    this.requiresFourWheelDrive = requiresFourWheelDrive;
  }


  public SegmentAttributes privatelyManaged(Boolean privatelyManaged) {
    this.privatelyManaged = privatelyManaged;
    return this;
  }

  /**
   * Indicates that the segment is part of a road which is privately held or maintained.
   * @return privatelyManaged
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIVATELY_MANAGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPrivatelyManaged() {
    return privatelyManaged;
  }


  @JsonProperty(JSON_PROPERTY_PRIVATELY_MANAGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivatelyManaged(Boolean privatelyManaged) {
    this.privatelyManaged = privatelyManaged;
  }


  public SegmentAttributes publicAccess(Boolean publicAccess) {
    this.publicAccess = publicAccess;
    return this;
  }

  /**
   * Indicates that the segment is part of a road which is publicly accessible.
   * @return publicAccess
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPublicAccess() {
    return publicAccess;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicAccess(Boolean publicAccess) {
    this.publicAccess = publicAccess;
  }


  public SegmentAttributes parkingLot(Boolean parkingLot) {
    this.parkingLot = parkingLot;
    return this;
  }

  /**
   * Indicates that the segment is part of a parking lot.
   * @return parkingLot
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARKING_LOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getParkingLot() {
    return parkingLot;
  }


  @JsonProperty(JSON_PROPERTY_PARKING_LOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParkingLot(Boolean parkingLot) {
    this.parkingLot = parkingLot;
  }


  public SegmentAttributes priorityRoad(Boolean priorityRoad) {
    this.priorityRoad = priorityRoad;
    return this;
  }

  /**
   * Indicates that the segment is part of a road where all traffic has priority over the traffic on the incoming roads.
   * @return priorityRoad
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIORITY_ROAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPriorityRoad() {
    return priorityRoad;
  }


  @JsonProperty(JSON_PROPERTY_PRIORITY_ROAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPriorityRoad(Boolean priorityRoad) {
    this.priorityRoad = priorityRoad;
  }


  public SegmentAttributes builtUpArea(Boolean builtUpArea) {
    this.builtUpArea = builtUpArea;
    return this;
  }

  /**
   * Indicates that the segment is part of a road inside the built up area of a city.
   * @return builtUpArea
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILT_UP_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getBuiltUpArea() {
    return builtUpArea;
  }


  @JsonProperty(JSON_PROPERTY_BUILT_UP_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuiltUpArea(Boolean builtUpArea) {
    this.builtUpArea = builtUpArea;
  }


  public SegmentAttributes speedLimit(Integer speedLimit) {
    this.speedLimit = speedLimit;
    return this;
  }

  /**
   * The legal speed limit on the road to which this segment belongs [km/h]. Speed limits sometimes depend on the driving direction. If there is no direction specified by the heading parameter of the request then the smaller speed value of the two possible directions is provided.
   * @return speedLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPEED_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getSpeedLimit() {
    return speedLimit;
  }


  @JsonProperty(JSON_PROPERTY_SPEED_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpeedLimit(Integer speedLimit) {
    this.speedLimit = speedLimit;
  }


  public SegmentAttributes roadCategory(Integer roadCategory) {
    this.roadCategory = roadCategory;
    return this;
  }

  /**
   * Classifies road segments into eight categories based on their general importance within the road network. Category 1 represents the most important roads, such as motorways, while category 8 includes the least important roads, such as pedestrian and cycle paths. This field is in an experimental state and may change at any time.
   * @return roadCategory
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROAD_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRoadCategory() {
    return roadCategory;
  }


  @JsonProperty(JSON_PROPERTY_ROAD_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoadCategory(Integer roadCategory) {
    this.roadCategory = roadCategory;
  }


  /**
   * Return true if this SegmentAttributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentAttributes segmentAttributes = (SegmentAttributes) o;
    return Objects.equals(this.bridge, segmentAttributes.bridge) &&
        Objects.equals(this.tunnel, segmentAttributes.tunnel) &&
        Objects.equals(this.ramp, segmentAttributes.ramp) &&
        Objects.equals(this.frontage, segmentAttributes.frontage) &&
        Objects.equals(this.paved, segmentAttributes.paved) &&
        Objects.equals(this.requiresFourWheelDrive, segmentAttributes.requiresFourWheelDrive) &&
        Objects.equals(this.privatelyManaged, segmentAttributes.privatelyManaged) &&
        Objects.equals(this.publicAccess, segmentAttributes.publicAccess) &&
        Objects.equals(this.parkingLot, segmentAttributes.parkingLot) &&
        Objects.equals(this.priorityRoad, segmentAttributes.priorityRoad) &&
        Objects.equals(this.builtUpArea, segmentAttributes.builtUpArea) &&
        Objects.equals(this.speedLimit, segmentAttributes.speedLimit) &&
        Objects.equals(this.roadCategory, segmentAttributes.roadCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridge, tunnel, ramp, frontage, paved, requiresFourWheelDrive, privatelyManaged, publicAccess, parkingLot, priorityRoad, builtUpArea, speedLimit, roadCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentAttributes {\n");
    sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
    sb.append("    tunnel: ").append(toIndentedString(tunnel)).append("\n");
    sb.append("    ramp: ").append(toIndentedString(ramp)).append("\n");
    sb.append("    frontage: ").append(toIndentedString(frontage)).append("\n");
    sb.append("    paved: ").append(toIndentedString(paved)).append("\n");
    sb.append("    requiresFourWheelDrive: ").append(toIndentedString(requiresFourWheelDrive)).append("\n");
    sb.append("    privatelyManaged: ").append(toIndentedString(privatelyManaged)).append("\n");
    sb.append("    publicAccess: ").append(toIndentedString(publicAccess)).append("\n");
    sb.append("    parkingLot: ").append(toIndentedString(parkingLot)).append("\n");
    sb.append("    priorityRoad: ").append(toIndentedString(priorityRoad)).append("\n");
    sb.append("    builtUpArea: ").append(toIndentedString(builtUpArea)).append("\n");
    sb.append("    speedLimit: ").append(toIndentedString(speedLimit)).append("\n");
    sb.append("    roadCategory: ").append(toIndentedString(roadCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bridge` to the URL query string
    if (getBridge() != null) {
      joiner.add(String.format("%sbridge%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBridge()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tunnel` to the URL query string
    if (getTunnel() != null) {
      joiner.add(String.format("%stunnel%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTunnel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ramp` to the URL query string
    if (getRamp() != null) {
      joiner.add(String.format("%sramp%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `frontage` to the URL query string
    if (getFrontage() != null) {
      joiner.add(String.format("%sfrontage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFrontage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `paved` to the URL query string
    if (getPaved() != null) {
      joiner.add(String.format("%spaved%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPaved()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `requiresFourWheelDrive` to the URL query string
    if (getRequiresFourWheelDrive() != null) {
      joiner.add(String.format("%srequiresFourWheelDrive%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRequiresFourWheelDrive()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `privatelyManaged` to the URL query string
    if (getPrivatelyManaged() != null) {
      joiner.add(String.format("%sprivatelyManaged%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPrivatelyManaged()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `publicAccess` to the URL query string
    if (getPublicAccess() != null) {
      joiner.add(String.format("%spublicAccess%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPublicAccess()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `parkingLot` to the URL query string
    if (getParkingLot() != null) {
      joiner.add(String.format("%sparkingLot%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getParkingLot()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `priorityRoad` to the URL query string
    if (getPriorityRoad() != null) {
      joiner.add(String.format("%spriorityRoad%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPriorityRoad()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `builtUpArea` to the URL query string
    if (getBuiltUpArea() != null) {
      joiner.add(String.format("%sbuiltUpArea%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBuiltUpArea()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `speedLimit` to the URL query string
    if (getSpeedLimit() != null) {
      joiner.add(String.format("%sspeedLimit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSpeedLimit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `roadCategory` to the URL query string
    if (getRoadCategory() != null) {
      joiner.add(String.format("%sroadCategory%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRoadCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

