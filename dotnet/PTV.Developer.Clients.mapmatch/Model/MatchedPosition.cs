/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Represents the successful match of a position on the map including the matched segment and the deviation to the input position. For unsuccessful matches an empty object is returned.
    /// </summary>
    [DataContract(Name = "MatchedPosition")]
    public partial class MatchedPosition : IEquatable<MatchedPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchedPosition" /> class.
        /// </summary>
        /// <param name="latitude">The latitude value in degrees (WGS84/EPSG:4326) from south to north. This refers to the coordinates on the segment to which the input position matches..</param>
        /// <param name="longitude">The longitude value in degrees (WGS84/EPSG:4326) from west to east. This refers to the coordinates on the segment to which the input position matches..</param>
        /// <param name="segmentGeometry">The geometry of the matched segment as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326)..</param>
        /// <param name="matchDistance">The straight-line distance (Euclidean distance) [m] from the input position to the matching segment..</param>
        /// <param name="angleDifference">The difference in degrees \\[°\\] between the angle of the travel direction and the angle of the matching segment. This value is always smaller than the straight angle..</param>
        /// <param name="segmentLocationDescriptors">segmentLocationDescriptors.</param>
        /// <param name="segmentAttributes">segmentAttributes.</param>
        /// <param name="lowEmissionZones">Describes the low emission zones of a road section..</param>
        /// <param name="toll">toll.</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public MatchedPosition(double? latitude = default(double?), double? longitude = default(double?), string segmentGeometry = default(string), int? matchDistance = default(int?), double? angleDifference = default(double?), SegmentLocationDescriptors segmentLocationDescriptors = default(SegmentLocationDescriptors), SegmentAttributes segmentAttributes = default(SegmentAttributes), List<LowEmissionZoneDescriptors> lowEmissionZones = default(List<LowEmissionZoneDescriptors>), Toll toll = default(Toll), List<Warning> warnings = default(List<Warning>))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.SegmentGeometry = segmentGeometry;
            this.MatchDistance = matchDistance;
            this.AngleDifference = angleDifference;
            this.SegmentLocationDescriptors = segmentLocationDescriptors;
            this.SegmentAttributes = segmentAttributes;
            this.LowEmissionZones = lowEmissionZones;
            this.Toll = toll;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The latitude value in degrees (WGS84/EPSG:4326) from south to north. This refers to the coordinates on the segment to which the input position matches.
        /// </summary>
        /// <value>The latitude value in degrees (WGS84/EPSG:4326) from south to north. This refers to the coordinates on the segment to which the input position matches.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude value in degrees (WGS84/EPSG:4326) from west to east. This refers to the coordinates on the segment to which the input position matches.
        /// </summary>
        /// <value>The longitude value in degrees (WGS84/EPSG:4326) from west to east. This refers to the coordinates on the segment to which the input position matches.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// The geometry of the matched segment as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).
        /// </summary>
        /// <value>The geometry of the matched segment as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).</value>
        [DataMember(Name = "segmentGeometry", EmitDefaultValue = true)]
        public string SegmentGeometry { get; set; }

        /// <summary>
        /// The straight-line distance (Euclidean distance) [m] from the input position to the matching segment.
        /// </summary>
        /// <value>The straight-line distance (Euclidean distance) [m] from the input position to the matching segment.</value>
        [DataMember(Name = "matchDistance", EmitDefaultValue = true)]
        public int? MatchDistance { get; set; }

        /// <summary>
        /// The difference in degrees \\[°\\] between the angle of the travel direction and the angle of the matching segment. This value is always smaller than the straight angle.
        /// </summary>
        /// <value>The difference in degrees \\[°\\] between the angle of the travel direction and the angle of the matching segment. This value is always smaller than the straight angle.</value>
        [DataMember(Name = "angleDifference", EmitDefaultValue = true)]
        public double? AngleDifference { get; set; }

        /// <summary>
        /// Gets or Sets SegmentLocationDescriptors
        /// </summary>
        [DataMember(Name = "segmentLocationDescriptors", EmitDefaultValue = false)]
        public SegmentLocationDescriptors SegmentLocationDescriptors { get; set; }

        /// <summary>
        /// Gets or Sets SegmentAttributes
        /// </summary>
        [DataMember(Name = "segmentAttributes", EmitDefaultValue = false)]
        public SegmentAttributes SegmentAttributes { get; set; }

        /// <summary>
        /// Describes the low emission zones of a road section.
        /// </summary>
        /// <value>Describes the low emission zones of a road section.</value>
        [DataMember(Name = "lowEmissionZones", EmitDefaultValue = false)]
        public List<LowEmissionZoneDescriptors> LowEmissionZones { get; set; }

        /// <summary>
        /// Gets or Sets Toll
        /// </summary>
        [DataMember(Name = "toll", EmitDefaultValue = false)]
        public Toll Toll { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchedPosition {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  SegmentGeometry: ").Append(SegmentGeometry).Append("\n");
            sb.Append("  MatchDistance: ").Append(MatchDistance).Append("\n");
            sb.Append("  AngleDifference: ").Append(AngleDifference).Append("\n");
            sb.Append("  SegmentLocationDescriptors: ").Append(SegmentLocationDescriptors).Append("\n");
            sb.Append("  SegmentAttributes: ").Append(SegmentAttributes).Append("\n");
            sb.Append("  LowEmissionZones: ").Append(LowEmissionZones).Append("\n");
            sb.Append("  Toll: ").Append(Toll).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchedPosition);
        }

        /// <summary>
        /// Returns true if MatchedPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchedPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchedPosition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.SegmentGeometry == input.SegmentGeometry ||
                    (this.SegmentGeometry != null &&
                    this.SegmentGeometry.Equals(input.SegmentGeometry))
                ) && 
                (
                    this.MatchDistance == input.MatchDistance ||
                    (this.MatchDistance != null &&
                    this.MatchDistance.Equals(input.MatchDistance))
                ) && 
                (
                    this.AngleDifference == input.AngleDifference ||
                    (this.AngleDifference != null &&
                    this.AngleDifference.Equals(input.AngleDifference))
                ) && 
                (
                    this.SegmentLocationDescriptors == input.SegmentLocationDescriptors ||
                    (this.SegmentLocationDescriptors != null &&
                    this.SegmentLocationDescriptors.Equals(input.SegmentLocationDescriptors))
                ) && 
                (
                    this.SegmentAttributes == input.SegmentAttributes ||
                    (this.SegmentAttributes != null &&
                    this.SegmentAttributes.Equals(input.SegmentAttributes))
                ) && 
                (
                    this.LowEmissionZones == input.LowEmissionZones ||
                    this.LowEmissionZones != null &&
                    input.LowEmissionZones != null &&
                    this.LowEmissionZones.SequenceEqual(input.LowEmissionZones)
                ) && 
                (
                    this.Toll == input.Toll ||
                    (this.Toll != null &&
                    this.Toll.Equals(input.Toll))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.SegmentGeometry != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentGeometry.GetHashCode();
                }
                if (this.MatchDistance != null)
                {
                    hashCode = (hashCode * 59) + this.MatchDistance.GetHashCode();
                }
                if (this.AngleDifference != null)
                {
                    hashCode = (hashCode * 59) + this.AngleDifference.GetHashCode();
                }
                if (this.SegmentLocationDescriptors != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentLocationDescriptors.GetHashCode();
                }
                if (this.SegmentAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentAttributes.GetHashCode();
                }
                if (this.LowEmissionZones != null)
                {
                    hashCode = (hashCode * 59) + this.LowEmissionZones.GetHashCode();
                }
                if (this.Toll != null)
                {
                    hashCode = (hashCode * 59) + this.Toll.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Latitude (double?) maximum
            if (this.Latitude > (double?)90)
            {
                yield return new ValidationResult("Invalid value for Latitude, must be a value less than or equal to 90.", new [] { "Latitude" });
            }

            // Latitude (double?) minimum
            if (this.Latitude < (double?)-90)
            {
                yield return new ValidationResult("Invalid value for Latitude, must be a value greater than or equal to -90.", new [] { "Latitude" });
            }

            // Longitude (double?) maximum
            if (this.Longitude > (double?)180)
            {
                yield return new ValidationResult("Invalid value for Longitude, must be a value less than or equal to 180.", new [] { "Longitude" });
            }

            // Longitude (double?) minimum
            if (this.Longitude < (double?)-180)
            {
                yield return new ValidationResult("Invalid value for Longitude, must be a value greater than or equal to -180.", new [] { "Longitude" });
            }

            // MatchDistance (int?) minimum
            if (this.MatchDistance < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MatchDistance, must be a value greater than or equal to 0.", new [] { "MatchDistance" });
            }

            // AngleDifference (double?) maximum
            if (this.AngleDifference > (double?)180)
            {
                yield return new ValidationResult("Invalid value for AngleDifference, must be a value less than or equal to 180.", new [] { "AngleDifference" });
            }

            // AngleDifference (double?) minimum
            if (this.AngleDifference < (double?)0)
            {
                yield return new ValidationResult("Invalid value for AngleDifference, must be a value greater than or equal to 0.", new [] { "AngleDifference" });
            }

            yield break;
        }
    }

}
