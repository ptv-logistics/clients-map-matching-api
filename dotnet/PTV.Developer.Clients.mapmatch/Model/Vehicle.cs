/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Describes a vehicle category with more specific vehicle characteristics.
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IEquatable<Vehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="vehicleCategory">The type of the vehicle. (required).</param>
        /// <param name="timeRestrictions">List of all time restrictions that apply to this vehicle..</param>
        /// <param name="fuelTypes">List of all fuel types that describe this vehicle.  Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly..</param>
        /// <param name="emissionStandards">List of all emission standards that this vehicle fulfils..</param>
        /// <param name="vehicleAttributes">Additional attributes that describe this vehicle. For example: min_total_weight, max_total_weight.</param>
        public Vehicle(string vehicleCategory = default(string), List<string> timeRestrictions = default(List<string>), List<string> fuelTypes = default(List<string>), List<EmissionStandard> emissionStandards = default(List<EmissionStandard>), Dictionary<string, Object> vehicleAttributes = default(Dictionary<string, Object>))
        {
            // to ensure "vehicleCategory" is required (not null)
            if (vehicleCategory == null)
            {
                throw new ArgumentNullException("vehicleCategory is a required property for Vehicle and cannot be null");
            }
            this.VehicleCategory = vehicleCategory;
            this.TimeRestrictions = timeRestrictions;
            this.FuelTypes = fuelTypes;
            this.EmissionStandards = emissionStandards;
            this.VehicleAttributes = vehicleAttributes;
        }

        /// <summary>
        /// The type of the vehicle.
        /// </summary>
        /// <value>The type of the vehicle.</value>
        /// <example>TRUCK</example>
        [DataMember(Name = "vehicleCategory", IsRequired = true, EmitDefaultValue = true)]
        public string VehicleCategory { get; set; }

        /// <summary>
        /// List of all time restrictions that apply to this vehicle.
        /// </summary>
        /// <value>List of all time restrictions that apply to this vehicle.</value>
        [DataMember(Name = "timeRestrictions", EmitDefaultValue = false)]
        public List<string> TimeRestrictions { get; set; }

        /// <summary>
        /// List of all fuel types that describe this vehicle.  Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.
        /// </summary>
        /// <value>List of all fuel types that describe this vehicle.  Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.</value>
        [DataMember(Name = "fuelTypes", EmitDefaultValue = false)]
        public List<string> FuelTypes { get; set; }

        /// <summary>
        /// List of all emission standards that this vehicle fulfils.
        /// </summary>
        /// <value>List of all emission standards that this vehicle fulfils.</value>
        [DataMember(Name = "emissionStandards", EmitDefaultValue = false)]
        public List<EmissionStandard> EmissionStandards { get; set; }

        /// <summary>
        /// Additional attributes that describe this vehicle. For example: min_total_weight, max_total_weight
        /// </summary>
        /// <value>Additional attributes that describe this vehicle. For example: min_total_weight, max_total_weight</value>
        /// <example>{&quot;max_total_weight&quot;:&quot;3500&quot;}</example>
        [DataMember(Name = "vehicleAttributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> VehicleAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  VehicleCategory: ").Append(VehicleCategory).Append("\n");
            sb.Append("  TimeRestrictions: ").Append(TimeRestrictions).Append("\n");
            sb.Append("  FuelTypes: ").Append(FuelTypes).Append("\n");
            sb.Append("  EmissionStandards: ").Append(EmissionStandards).Append("\n");
            sb.Append("  VehicleAttributes: ").Append(VehicleAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VehicleCategory == input.VehicleCategory ||
                    (this.VehicleCategory != null &&
                    this.VehicleCategory.Equals(input.VehicleCategory))
                ) && 
                (
                    this.TimeRestrictions == input.TimeRestrictions ||
                    this.TimeRestrictions != null &&
                    input.TimeRestrictions != null &&
                    this.TimeRestrictions.SequenceEqual(input.TimeRestrictions)
                ) && 
                (
                    this.FuelTypes == input.FuelTypes ||
                    this.FuelTypes != null &&
                    input.FuelTypes != null &&
                    this.FuelTypes.SequenceEqual(input.FuelTypes)
                ) && 
                (
                    this.EmissionStandards == input.EmissionStandards ||
                    this.EmissionStandards != null &&
                    input.EmissionStandards != null &&
                    this.EmissionStandards.SequenceEqual(input.EmissionStandards)
                ) && 
                (
                    this.VehicleAttributes == input.VehicleAttributes ||
                    this.VehicleAttributes != null &&
                    input.VehicleAttributes != null &&
                    this.VehicleAttributes.SequenceEqual(input.VehicleAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VehicleCategory != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleCategory.GetHashCode();
                }
                if (this.TimeRestrictions != null)
                {
                    hashCode = (hashCode * 59) + this.TimeRestrictions.GetHashCode();
                }
                if (this.FuelTypes != null)
                {
                    hashCode = (hashCode * 59) + this.FuelTypes.GetHashCode();
                }
                if (this.EmissionStandards != null)
                {
                    hashCode = (hashCode * 59) + this.EmissionStandards.GetHashCode();
                }
                if (this.VehicleAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleAttributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
