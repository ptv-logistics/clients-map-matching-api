/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Contains the results of a matching calculation. If the &#39;status&#39; is &#39;RUNNING&#39;, the matching calculation is still running and no further properties are set. If the &#39;status&#39; is &#39;SUCCEEDED&#39;, the matching result is present as property &#39;matchedTrack&#39;. If the &#39;status&#39; is &#39;FAILED&#39;, the failure result is present as property &#39;error&#39;.
    /// </summary>
    [DataContract(Name = "MatchingResponse")]
    public partial class MatchingResponse : IEquatable<MatchingResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public MatchingStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchingResponse" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="matchedTrack">matchedTrack.</param>
        /// <param name="error">error.</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public MatchingResponse(MatchingStatus? status = default(MatchingStatus?), MatchedTrack matchedTrack = default(MatchedTrack), ErrorResponse error = default(ErrorResponse), List<Warning> warnings = default(List<Warning>))
        {
            this.Status = status;
            this.MatchedTrack = matchedTrack;
            this.Error = error;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets MatchedTrack
        /// </summary>
        [DataMember(Name = "matchedTrack", EmitDefaultValue = false)]
        public MatchedTrack MatchedTrack { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchingResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MatchedTrack: ").Append(MatchedTrack).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchingResponse);
        }

        /// <summary>
        /// Returns true if MatchingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchingResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.MatchedTrack == input.MatchedTrack ||
                    (this.MatchedTrack != null &&
                    this.MatchedTrack.Equals(input.MatchedTrack))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.MatchedTrack != null)
                {
                    hashCode = (hashCode * 59) + this.MatchedTrack.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
