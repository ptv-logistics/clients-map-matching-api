/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Describes the low emission zone properties of a segment.
    /// </summary>
    [DataContract(Name = "LowEmissionZoneDescriptors")]
    public partial class LowEmissionZoneDescriptors : IEquatable<LowEmissionZoneDescriptors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LowEmissionZoneDescriptors" /> class.
        /// </summary>
        /// <param name="name">Name of the low emission zone..</param>
        /// <param name="approvals">List of all badges that are approved to enter the low emission zone. In difference to the Routing API it contains also badges for Mexico.   Available values are: \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;, \&quot;MX_HOLOGRAMA_0\&quot;, \&quot;MX_HOLOGRAMA_00\&quot;, \&quot;MX_HOLOGRAMA_1\&quot;, \&quot;MX_HOLOGRAMA_2\&quot;, \&quot;MX_HOLOGRAMA_EXEMPT\&quot;, \&quot;MX_HOLOGRAMA_FOREIGN\&quot;.   This list can be extended at any time, clients should handle unknown values properly..</param>
        /// <param name="vehicleCategories">List of all possible vehicle categories that are restricted to enter the low emission zone.   Available values are:  \&quot;ALL_VEHICLES\&quot;, \&quot;BUS\&quot;, \&quot;CAR\&quot;, \&quot;CARPOOL\&quot;, \&quot;DELIVERY_TRUCK\&quot;, \&quot;MOTORCYCLE\&quot;, \&quot;TAXI\&quot;, \&quot;THROUGH_TRAFFIC\&quot;, \&quot;TRUCK\&quot;, \&quot;PEDESTRIAN\&quot;, \&quot;EMERGENCY_VEHICLE\&quot;.   This list can be extended at any time, clients should handle unknown values properly..</param>
        /// <param name="fuelTypes">List of all possible fuel types that are restricted to enter the low emission zone.   Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly..</param>
        /// <param name="vehicles">List of more specific characteristics of the listed vehicle categories..</param>
        public LowEmissionZoneDescriptors(string name = default(string), List<string> approvals = default(List<string>), List<string> vehicleCategories = default(List<string>), List<string> fuelTypes = default(List<string>), List<Vehicle> vehicles = default(List<Vehicle>))
        {
            this.Name = name;
            this.Approvals = approvals;
            this.VehicleCategories = vehicleCategories;
            this.FuelTypes = fuelTypes;
            this.Vehicles = vehicles;
        }

        /// <summary>
        /// Name of the low emission zone.
        /// </summary>
        /// <value>Name of the low emission zone.</value>
        /// <example>Firenze Ecozona</example>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of all badges that are approved to enter the low emission zone. In difference to the Routing API it contains also badges for Mexico.   Available values are: \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;, \&quot;MX_HOLOGRAMA_0\&quot;, \&quot;MX_HOLOGRAMA_00\&quot;, \&quot;MX_HOLOGRAMA_1\&quot;, \&quot;MX_HOLOGRAMA_2\&quot;, \&quot;MX_HOLOGRAMA_EXEMPT\&quot;, \&quot;MX_HOLOGRAMA_FOREIGN\&quot;.   This list can be extended at any time, clients should handle unknown values properly.
        /// </summary>
        /// <value>List of all badges that are approved to enter the low emission zone. In difference to the Routing API it contains also badges for Mexico.   Available values are: \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;, \&quot;MX_HOLOGRAMA_0\&quot;, \&quot;MX_HOLOGRAMA_00\&quot;, \&quot;MX_HOLOGRAMA_1\&quot;, \&quot;MX_HOLOGRAMA_2\&quot;, \&quot;MX_HOLOGRAMA_EXEMPT\&quot;, \&quot;MX_HOLOGRAMA_FOREIGN\&quot;.   This list can be extended at any time, clients should handle unknown values properly.</value>
        [DataMember(Name = "approvals", EmitDefaultValue = false)]
        public List<string> Approvals { get; set; }

        /// <summary>
        /// List of all possible vehicle categories that are restricted to enter the low emission zone.   Available values are:  \&quot;ALL_VEHICLES\&quot;, \&quot;BUS\&quot;, \&quot;CAR\&quot;, \&quot;CARPOOL\&quot;, \&quot;DELIVERY_TRUCK\&quot;, \&quot;MOTORCYCLE\&quot;, \&quot;TAXI\&quot;, \&quot;THROUGH_TRAFFIC\&quot;, \&quot;TRUCK\&quot;, \&quot;PEDESTRIAN\&quot;, \&quot;EMERGENCY_VEHICLE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.
        /// </summary>
        /// <value>List of all possible vehicle categories that are restricted to enter the low emission zone.   Available values are:  \&quot;ALL_VEHICLES\&quot;, \&quot;BUS\&quot;, \&quot;CAR\&quot;, \&quot;CARPOOL\&quot;, \&quot;DELIVERY_TRUCK\&quot;, \&quot;MOTORCYCLE\&quot;, \&quot;TAXI\&quot;, \&quot;THROUGH_TRAFFIC\&quot;, \&quot;TRUCK\&quot;, \&quot;PEDESTRIAN\&quot;, \&quot;EMERGENCY_VEHICLE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.</value>
        [DataMember(Name = "vehicleCategories", EmitDefaultValue = false)]
        public List<string> VehicleCategories { get; set; }

        /// <summary>
        /// List of all possible fuel types that are restricted to enter the low emission zone.   Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.
        /// </summary>
        /// <value>List of all possible fuel types that are restricted to enter the low emission zone.   Available values are: \&quot;CNG_GASOLINE\&quot;, \&quot;COMPRESSED_NATURAL_GAS\&quot;, \&quot;DIESEL\&quot;, \&quot;ETHANOL\&quot;, \&quot;GASOLINE\&quot;, \&quot;LIQUEFIED_PETROLEUM_GAS\&quot;, \&quot;LIQUEFIED_NATURAL_GAS\&quot;, \&quot;LPG_GASOLINE\&quot;, \&quot;NONE\&quot;.   This list can be extended at any time, clients should handle unknown values properly.</value>
        [DataMember(Name = "fuelTypes", EmitDefaultValue = false)]
        public List<string> FuelTypes { get; set; }

        /// <summary>
        /// List of more specific characteristics of the listed vehicle categories.
        /// </summary>
        /// <value>List of more specific characteristics of the listed vehicle categories.</value>
        [DataMember(Name = "vehicles", EmitDefaultValue = false)]
        public List<Vehicle> Vehicles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LowEmissionZoneDescriptors {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Approvals: ").Append(Approvals).Append("\n");
            sb.Append("  VehicleCategories: ").Append(VehicleCategories).Append("\n");
            sb.Append("  FuelTypes: ").Append(FuelTypes).Append("\n");
            sb.Append("  Vehicles: ").Append(Vehicles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LowEmissionZoneDescriptors);
        }

        /// <summary>
        /// Returns true if LowEmissionZoneDescriptors instances are equal
        /// </summary>
        /// <param name="input">Instance of LowEmissionZoneDescriptors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LowEmissionZoneDescriptors input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Approvals == input.Approvals ||
                    this.Approvals != null &&
                    input.Approvals != null &&
                    this.Approvals.SequenceEqual(input.Approvals)
                ) && 
                (
                    this.VehicleCategories == input.VehicleCategories ||
                    this.VehicleCategories != null &&
                    input.VehicleCategories != null &&
                    this.VehicleCategories.SequenceEqual(input.VehicleCategories)
                ) && 
                (
                    this.FuelTypes == input.FuelTypes ||
                    this.FuelTypes != null &&
                    input.FuelTypes != null &&
                    this.FuelTypes.SequenceEqual(input.FuelTypes)
                ) && 
                (
                    this.Vehicles == input.Vehicles ||
                    this.Vehicles != null &&
                    input.Vehicles != null &&
                    this.Vehicles.SequenceEqual(input.Vehicles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Approvals != null)
                {
                    hashCode = (hashCode * 59) + this.Approvals.GetHashCode();
                }
                if (this.VehicleCategories != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleCategories.GetHashCode();
                }
                if (this.FuelTypes != null)
                {
                    hashCode = (hashCode * 59) + this.FuelTypes.GetHashCode();
                }
                if (this.Vehicles != null)
                {
                    hashCode = (hashCode * 59) + this.Vehicles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
