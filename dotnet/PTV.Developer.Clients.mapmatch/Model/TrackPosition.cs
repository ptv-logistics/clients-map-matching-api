/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Describes a position which belongs to a track with additional track related attributes.
    /// </summary>
    [DataContract(Name = "TrackPosition")]
    public partial class TrackPosition : IEquatable<TrackPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackPosition" /> class.
        /// </summary>
        /// <param name="latitude">The latitude value in degrees (WGS84/EPSG:4326) from south to north of the position to be matched. (required).</param>
        /// <param name="longitude">The longitude value in degrees (WGS84/EPSG:4326) from west to east of the position to be matched. (required).</param>
        /// <param name="heading">The direction of travel defined by a clockwise angle with respect to north in degrees \\\\[°\\\\], e.g., 0° is north, 90° is east, 180° is south, and 270° is west..</param>
        /// <param name="distanceFromPreviousPosition">The travel distance [m] from the previous position to this position. This value can be provided to improve the quality of the track matching..</param>
        /// <param name="timestamp">Time defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339) when the input position was passed. This value has to be set either for all input positions or none. If set they must have an ascending order. A time zone has to be set explicitly..</param>
        public TrackPosition(double? latitude = default(double?), double? longitude = default(double?), double? heading = default(double?), double? distanceFromPreviousPosition = default(double?), DateTimeOffset? timestamp = default(DateTimeOffset?))
        {
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new ArgumentNullException("latitude is a required property for TrackPosition and cannot be null");
            }
            this.Latitude = latitude;
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new ArgumentNullException("longitude is a required property for TrackPosition and cannot be null");
            }
            this.Longitude = longitude;
            this.Heading = heading;
            this.DistanceFromPreviousPosition = distanceFromPreviousPosition;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// The latitude value in degrees (WGS84/EPSG:4326) from south to north of the position to be matched.
        /// </summary>
        /// <value>The latitude value in degrees (WGS84/EPSG:4326) from south to north of the position to be matched.</value>
        /// <example>49.480301</example>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude value in degrees (WGS84/EPSG:4326) from west to east of the position to be matched.
        /// </summary>
        /// <value>The longitude value in degrees (WGS84/EPSG:4326) from west to east of the position to be matched.</value>
        /// <example>6.110667</example>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// The direction of travel defined by a clockwise angle with respect to north in degrees \\\\[°\\\\], e.g., 0° is north, 90° is east, 180° is south, and 270° is west.
        /// </summary>
        /// <value>The direction of travel defined by a clockwise angle with respect to north in degrees \\\\[°\\\\], e.g., 0° is north, 90° is east, 180° is south, and 270° is west.</value>
        /// <example>45</example>
        [DataMember(Name = "heading", EmitDefaultValue = true)]
        public double? Heading { get; set; }

        /// <summary>
        /// The travel distance [m] from the previous position to this position. This value can be provided to improve the quality of the track matching.
        /// </summary>
        /// <value>The travel distance [m] from the previous position to this position. This value can be provided to improve the quality of the track matching.</value>
        [DataMember(Name = "distanceFromPreviousPosition", EmitDefaultValue = true)]
        public double? DistanceFromPreviousPosition { get; set; }

        /// <summary>
        /// Time defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339) when the input position was passed. This value has to be set either for all input positions or none. If set they must have an ascending order. A time zone has to be set explicitly.
        /// </summary>
        /// <value>Time defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339) when the input position was passed. This value has to be set either for all input positions or none. If set they must have an ascending order. A time zone has to be set explicitly.</value>
        /// <example>2024-10-24T06:00Z</example>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public DateTimeOffset? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackPosition {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  DistanceFromPreviousPosition: ").Append(DistanceFromPreviousPosition).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackPosition);
        }

        /// <summary>
        /// Returns true if TrackPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackPosition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Heading == input.Heading ||
                    (this.Heading != null &&
                    this.Heading.Equals(input.Heading))
                ) && 
                (
                    this.DistanceFromPreviousPosition == input.DistanceFromPreviousPosition ||
                    (this.DistanceFromPreviousPosition != null &&
                    this.DistanceFromPreviousPosition.Equals(input.DistanceFromPreviousPosition))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Heading != null)
                {
                    hashCode = (hashCode * 59) + this.Heading.GetHashCode();
                }
                if (this.DistanceFromPreviousPosition != null)
                {
                    hashCode = (hashCode * 59) + this.DistanceFromPreviousPosition.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Latitude (double?) maximum
            if (this.Latitude > (double?)90)
            {
                yield return new ValidationResult("Invalid value for Latitude, must be a value less than or equal to 90.", new [] { "Latitude" });
            }

            // Latitude (double?) minimum
            if (this.Latitude < (double?)-90)
            {
                yield return new ValidationResult("Invalid value for Latitude, must be a value greater than or equal to -90.", new [] { "Latitude" });
            }

            // Longitude (double?) maximum
            if (this.Longitude > (double?)180)
            {
                yield return new ValidationResult("Invalid value for Longitude, must be a value less than or equal to 180.", new [] { "Longitude" });
            }

            // Longitude (double?) minimum
            if (this.Longitude < (double?)-180)
            {
                yield return new ValidationResult("Invalid value for Longitude, must be a value greater than or equal to -180.", new [] { "Longitude" });
            }

            // Heading (double?) maximum
            if (this.Heading > (double?)360)
            {
                yield return new ValidationResult("Invalid value for Heading, must be a value less than or equal to 360.", new [] { "Heading" });
            }

            // Heading (double?) minimum
            if (this.Heading < (double?)0)
            {
                yield return new ValidationResult("Invalid value for Heading, must be a value greater than or equal to 0.", new [] { "Heading" });
            }

            // DistanceFromPreviousPosition (double?) minimum
            if (this.DistanceFromPreviousPosition < (double?)0)
            {
                yield return new ValidationResult("Invalid value for DistanceFromPreviousPosition, must be a value greater than or equal to 0.", new [] { "DistanceFromPreviousPosition" });
            }

            yield break;
        }
    }

}
