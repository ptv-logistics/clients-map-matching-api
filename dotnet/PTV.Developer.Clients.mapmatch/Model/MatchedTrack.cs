/*
 * Map Matching
 *
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.mapmatch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.mapmatch.Model
{
    /// <summary>
    /// Contains the result of the matched track.
    /// </summary>
    [DataContract(Name = "MatchedTrack")]
    public partial class MatchedTrack : IEquatable<MatchedTrack>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchedTrack" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchedTrack() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchedTrack" /> class.
        /// </summary>
        /// <param name="id">The ID of the MatchedTrack. (required).</param>
        /// <param name="distance">The distance [m] of the complete track. It is the sum of distances of all path distances. (required).</param>
        /// <param name="paths">The parts that make up a track..</param>
        /// <param name="geometry">The geometry of the paths (collection of polylines) as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326)..</param>
        /// <param name="trackPositions">The positions used to match the track..</param>
        public MatchedTrack(string id = default(string), int? distance = default(int?), List<MatchedPath> paths = default(List<MatchedPath>), string geometry = default(string), List<MatchedTrackPosition> trackPositions = default(List<MatchedTrackPosition>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MatchedTrack and cannot be null");
            }
            this.Id = id;
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for MatchedTrack and cannot be null");
            }
            this.Distance = distance;
            this.Paths = paths;
            this.Geometry = geometry;
            this.TrackPositions = trackPositions;
        }

        /// <summary>
        /// The ID of the MatchedTrack.
        /// </summary>
        /// <value>The ID of the MatchedTrack.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The distance [m] of the complete track. It is the sum of distances of all path distances.
        /// </summary>
        /// <value>The distance [m] of the complete track. It is the sum of distances of all path distances.</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// The parts that make up a track.
        /// </summary>
        /// <value>The parts that make up a track.</value>
        [DataMember(Name = "paths", EmitDefaultValue = false)]
        public List<MatchedPath> Paths { get; set; }

        /// <summary>
        /// The geometry of the paths (collection of polylines) as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).
        /// </summary>
        /// <value>The geometry of the paths (collection of polylines) as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).</value>
        [DataMember(Name = "geometry", EmitDefaultValue = true)]
        public string Geometry { get; set; }

        /// <summary>
        /// The positions used to match the track.
        /// </summary>
        /// <value>The positions used to match the track.</value>
        [DataMember(Name = "trackPositions", EmitDefaultValue = false)]
        public List<MatchedTrackPosition> TrackPositions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchedTrack {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  TrackPositions: ").Append(TrackPositions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchedTrack);
        }

        /// <summary>
        /// Returns true if MatchedTrack instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchedTrack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchedTrack input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    input.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.TrackPositions == input.TrackPositions ||
                    this.TrackPositions != null &&
                    input.TrackPositions != null &&
                    this.TrackPositions.SequenceEqual(input.TrackPositions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Distance != null)
                {
                    hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                }
                if (this.Paths != null)
                {
                    hashCode = (hashCode * 59) + this.Paths.GetHashCode();
                }
                if (this.Geometry != null)
                {
                    hashCode = (hashCode * 59) + this.Geometry.GetHashCode();
                }
                if (this.TrackPositions != null)
                {
                    hashCode = (hashCode * 59) + this.TrackPositions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Distance (int?) minimum
            if (this.Distance < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            yield break;
        }
    }

}
