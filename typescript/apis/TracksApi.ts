/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalculationMode,
  ErrorResponse,
  MatchedTrackIdentifier,
  MatchedTrackResultType,
  MatchingResponse,
  Track,
} from '../models/index';
import {
    CalculationModeFromJSON,
    CalculationModeToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MatchedTrackIdentifierFromJSON,
    MatchedTrackIdentifierToJSON,
    MatchedTrackResultTypeFromJSON,
    MatchedTrackResultTypeToJSON,
    MatchingResponseFromJSON,
    MatchingResponseToJSON,
    TrackFromJSON,
    TrackToJSON,
} from '../models/index';

export interface CreateMatchedTrackRequest {
    track: Track;
    calculationMode?: CalculationMode;
}

export interface DeleteMatchedTrackRequest {
    id: string;
}

export interface GetMatchedTrackRequest {
    id: string;
    results?: Array<MatchedTrackResultType>;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /**
     * Creates a complete track by triggering a matching calculation for it.
     */
    async createMatchedTrackRaw(requestParameters: CreateMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchedTrackIdentifier>> {
        if (requestParameters['track'] == null) {
            throw new runtime.RequiredError(
                'track',
                'Required parameter "track" was null or undefined when calling createMatchedTrack().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['calculationMode'] != null) {
            queryParameters['calculationMode'] = requestParameters['calculationMode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackToJSON(requestParameters['track']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchedTrackIdentifierFromJSON(jsonValue));
    }

    /**
     * Creates a complete track by triggering a matching calculation for it.
     */
    async createMatchedTrack(requestParameters: CreateMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchedTrackIdentifier> {
        const response = await this.createMatchedTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a matched track specified by its ID.
     */
    async deleteMatchedTrackRaw(requestParameters: DeleteMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMatchedTrack().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a matched track specified by its ID.
     */
    async deleteMatchedTrack(requestParameters: DeleteMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMatchedTrackRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the results of a matching calculation specified by its ID.
     */
    async getMatchedTrackRaw(requestParameters: GetMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchingResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMatchedTrack().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['results'] != null) {
            queryParameters['results'] = requestParameters['results']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchingResponseFromJSON(jsonValue));
    }

    /**
     * Gets the results of a matching calculation specified by its ID.
     */
    async getMatchedTrack(requestParameters: GetMatchedTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchingResponse> {
        const response = await this.getMatchedTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
