/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Describes a position which belongs to a track with additional track related attributes.
 * @export
 * @interface TrackPosition
 */
export interface TrackPosition {
    /**
     * The latitude value in degrees (WGS84/EPSG:4326) from south to north of the position to be matched.
     * @type {number}
     * @memberof TrackPosition
     */
    latitude: number;
    /**
     * The longitude value in degrees (WGS84/EPSG:4326) from west to east of the position to be matched.
     * @type {number}
     * @memberof TrackPosition
     */
    longitude: number;
    /**
     * The direction of travel defined by a clockwise angle with respect to north in degrees \\[°\\], e.g., 0° is north, 90° is east, 180° is south, and 270° is west.
     * @type {number}
     * @memberof TrackPosition
     */
    heading?: number;
    /**
     * The travel distance [m] from the previous position to this position. This value can be provided to improve the quality of the track matching.
     * @type {number}
     * @memberof TrackPosition
     */
    distanceFromPreviousPosition?: number;
    /**
     * Time defined according to [RFC 3339](https://tools.ietf.org/html/rfc3339) when the input position was passed. This value has to be set either for all input positions or none. If set they must have an ascending order. A time zone has to be set explicitly.
     * @type {Date}
     * @memberof TrackPosition
     */
    timestamp?: Date;
}

/**
 * Check if a given object implements the TrackPosition interface.
 */
export function instanceOfTrackPosition(value: object): value is TrackPosition {
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    return true;
}

export function TrackPositionFromJSON(json: any): TrackPosition {
    return TrackPositionFromJSONTyped(json, false);
}

export function TrackPositionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackPosition {
    if (json == null) {
        return json;
    }
    return {
        
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'heading': json['heading'] == null ? undefined : json['heading'],
        'distanceFromPreviousPosition': json['distanceFromPreviousPosition'] == null ? undefined : json['distanceFromPreviousPosition'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
    };
}

export function TrackPositionToJSON(value?: TrackPosition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'heading': value['heading'],
        'distanceFromPreviousPosition': value['distanceFromPreviousPosition'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
    };
}

