/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Warning } from './Warning';
import {
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
} from './Warning';
import type { SegmentLocationDescriptors } from './SegmentLocationDescriptors';
import {
    SegmentLocationDescriptorsFromJSON,
    SegmentLocationDescriptorsFromJSONTyped,
    SegmentLocationDescriptorsToJSON,
} from './SegmentLocationDescriptors';
import type { SegmentAttributes } from './SegmentAttributes';
import {
    SegmentAttributesFromJSON,
    SegmentAttributesFromJSONTyped,
    SegmentAttributesToJSON,
} from './SegmentAttributes';
import type { Toll } from './Toll';
import {
    TollFromJSON,
    TollFromJSONTyped,
    TollToJSON,
} from './Toll';
import type { LowEmissionZoneDescriptors } from './LowEmissionZoneDescriptors';
import {
    LowEmissionZoneDescriptorsFromJSON,
    LowEmissionZoneDescriptorsFromJSONTyped,
    LowEmissionZoneDescriptorsToJSON,
} from './LowEmissionZoneDescriptors';

/**
 * Represents the successful match of a position on the map including the matched segment and the deviation to the input position. For unsuccessful matches an empty object is returned.
 * @export
 * @interface MatchedPosition
 */
export interface MatchedPosition {
    /**
     * The latitude value in degrees (WGS84/EPSG:4326) from south to north. This refers to the coordinates on the segment to which the input position matches.
     * @type {number}
     * @memberof MatchedPosition
     */
    latitude?: number;
    /**
     * The longitude value in degrees (WGS84/EPSG:4326) from west to east. This refers to the coordinates on the segment to which the input position matches.
     * @type {number}
     * @memberof MatchedPosition
     */
    longitude?: number;
    /**
     * The geometry of the matched segment as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).
     * @type {string}
     * @memberof MatchedPosition
     */
    segmentGeometry?: string;
    /**
     * The straight-line distance (Euclidean distance) [m] from the input position to the matching segment.
     * @type {number}
     * @memberof MatchedPosition
     */
    matchDistance?: number;
    /**
     * The difference in degrees \[Â°\] between the angle of the travel direction and the angle of the matching segment. This value is always smaller than the straight angle.
     * @type {number}
     * @memberof MatchedPosition
     */
    angleDifference?: number;
    /**
     * 
     * @type {SegmentLocationDescriptors}
     * @memberof MatchedPosition
     */
    segmentLocationDescriptors?: SegmentLocationDescriptors;
    /**
     * 
     * @type {SegmentAttributes}
     * @memberof MatchedPosition
     */
    segmentAttributes?: SegmentAttributes;
    /**
     * Describes the low emission zones of a road section.
     * @type {Array<LowEmissionZoneDescriptors>}
     * @memberof MatchedPosition
     */
    lowEmissionZones?: Array<LowEmissionZoneDescriptors>;
    /**
     * 
     * @type {Toll}
     * @memberof MatchedPosition
     */
    toll?: Toll;
    /**
     * A list of warnings concerning the validity of the result.
     * @type {Array<Warning>}
     * @memberof MatchedPosition
     */
    warnings?: Array<Warning>;
}

/**
 * Check if a given object implements the MatchedPosition interface.
 */
export function instanceOfMatchedPosition(value: object): value is MatchedPosition {
    return true;
}

export function MatchedPositionFromJSON(json: any): MatchedPosition {
    return MatchedPositionFromJSONTyped(json, false);
}

export function MatchedPositionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchedPosition {
    if (json == null) {
        return json;
    }
    return {
        
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'segmentGeometry': json['segmentGeometry'] == null ? undefined : json['segmentGeometry'],
        'matchDistance': json['matchDistance'] == null ? undefined : json['matchDistance'],
        'angleDifference': json['angleDifference'] == null ? undefined : json['angleDifference'],
        'segmentLocationDescriptors': json['segmentLocationDescriptors'] == null ? undefined : SegmentLocationDescriptorsFromJSON(json['segmentLocationDescriptors']),
        'segmentAttributes': json['segmentAttributes'] == null ? undefined : SegmentAttributesFromJSON(json['segmentAttributes']),
        'lowEmissionZones': json['lowEmissionZones'] == null ? undefined : ((json['lowEmissionZones'] as Array<any>).map(LowEmissionZoneDescriptorsFromJSON)),
        'toll': json['toll'] == null ? undefined : TollFromJSON(json['toll']),
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(WarningFromJSON)),
    };
}

export function MatchedPositionToJSON(value?: MatchedPosition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'segmentGeometry': value['segmentGeometry'],
        'matchDistance': value['matchDistance'],
        'angleDifference': value['angleDifference'],
        'segmentLocationDescriptors': SegmentLocationDescriptorsToJSON(value['segmentLocationDescriptors']),
        'segmentAttributes': SegmentAttributesToJSON(value['segmentAttributes']),
        'lowEmissionZones': value['lowEmissionZones'] == null ? undefined : ((value['lowEmissionZones'] as Array<any>).map(LowEmissionZoneDescriptorsToJSON)),
        'toll': TollToJSON(value['toll']),
        'warnings': value['warnings'] == null ? undefined : ((value['warnings'] as Array<any>).map(WarningToJSON)),
    };
}

