/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MatchedPath } from './MatchedPath';
import {
    MatchedPathFromJSON,
    MatchedPathFromJSONTyped,
    MatchedPathToJSON,
} from './MatchedPath';
import type { MatchedTrackPosition } from './MatchedTrackPosition';
import {
    MatchedTrackPositionFromJSON,
    MatchedTrackPositionFromJSONTyped,
    MatchedTrackPositionToJSON,
} from './MatchedTrackPosition';

/**
 * Contains the result of the matched track.
 * @export
 * @interface MatchedTrack
 */
export interface MatchedTrack {
    /**
     * The ID of the MatchedTrack.
     * @type {string}
     * @memberof MatchedTrack
     */
    id: string;
    /**
     * The distance [m] of the complete track. It is the sum of distances of all path distances.
     * @type {number}
     * @memberof MatchedTrack
     */
    distance: number;
    /**
     * The parts that make up a track.
     * @type {Array<MatchedPath>}
     * @memberof MatchedTrack
     */
    paths?: Array<MatchedPath>;
    /**
     * The geometry of the paths (collection of polylines) as a GeoJSON representation. Coordinates are always present in WGS84 (EPSG:4326).
     * @type {string}
     * @memberof MatchedTrack
     */
    geometry?: string;
    /**
     * The positions used to match the track.
     * @type {Array<MatchedTrackPosition>}
     * @memberof MatchedTrack
     */
    trackPositions?: Array<MatchedTrackPosition>;
}

/**
 * Check if a given object implements the MatchedTrack interface.
 */
export function instanceOfMatchedTrack(value: object): value is MatchedTrack {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('distance' in value) || value['distance'] === undefined) return false;
    return true;
}

export function MatchedTrackFromJSON(json: any): MatchedTrack {
    return MatchedTrackFromJSONTyped(json, false);
}

export function MatchedTrackFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchedTrack {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'distance': json['distance'],
        'paths': json['paths'] == null ? undefined : ((json['paths'] as Array<any>).map(MatchedPathFromJSON)),
        'geometry': json['geometry'] == null ? undefined : json['geometry'],
        'trackPositions': json['trackPositions'] == null ? undefined : ((json['trackPositions'] as Array<any>).map(MatchedTrackPositionFromJSON)),
    };
}

export function MatchedTrackToJSON(value?: MatchedTrack | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'distance': value['distance'],
        'paths': value['paths'] == null ? undefined : ((value['paths'] as Array<any>).map(MatchedPathToJSON)),
        'geometry': value['geometry'],
        'trackPositions': value['trackPositions'] == null ? undefined : ((value['trackPositions'] as Array<any>).map(MatchedTrackPositionToJSON)),
    };
}

