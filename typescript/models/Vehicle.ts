/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmissionStandard } from './EmissionStandard';
import {
    EmissionStandardFromJSON,
    EmissionStandardFromJSONTyped,
    EmissionStandardToJSON,
} from './EmissionStandard';

/**
 * Describes a vehicle category with more specific vehicle characteristics.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * The type of the vehicle.
     * @type {string}
     * @memberof Vehicle
     */
    vehicleCategory: string;
    /**
     * List of all time restrictions that apply to this vehicle.
     * @type {Array<string>}
     * @memberof Vehicle
     */
    timeRestrictions?: Array<string>;
    /**
     * List of all fuel types that describe this vehicle. 
     * Available values are: "CNG_GASOLINE", "COMPRESSED_NATURAL_GAS", "DIESEL", "ETHANOL", "GASOLINE", "LIQUEFIED_PETROLEUM_GAS", "LIQUEFIED_NATURAL_GAS", "LPG_GASOLINE", "NONE".  
     * This list can be extended at any time, clients should handle unknown values properly.
     * @type {Array<string>}
     * @memberof Vehicle
     */
    fuelTypes?: Array<string>;
    /**
     * List of all emission standards that this vehicle fulfils.
     * @type {Array<EmissionStandard>}
     * @memberof Vehicle
     */
    emissionStandards?: Array<EmissionStandard>;
    /**
     * Additional attributes that describe this vehicle. For example: min_total_weight, max_total_weight
     * @type {{ [key: string]: any; }}
     * @memberof Vehicle
     */
    vehicleAttributes?: { [key: string]: any; };
}

/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): value is Vehicle {
    if (!('vehicleCategory' in value) || value['vehicleCategory'] === undefined) return false;
    return true;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if (json == null) {
        return json;
    }
    return {
        
        'vehicleCategory': json['vehicleCategory'],
        'timeRestrictions': json['timeRestrictions'] == null ? undefined : json['timeRestrictions'],
        'fuelTypes': json['fuelTypes'] == null ? undefined : json['fuelTypes'],
        'emissionStandards': json['emissionStandards'] == null ? undefined : ((json['emissionStandards'] as Array<any>).map(EmissionStandardFromJSON)),
        'vehicleAttributes': json['vehicleAttributes'] == null ? undefined : json['vehicleAttributes'],
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'vehicleCategory': value['vehicleCategory'],
        'timeRestrictions': value['timeRestrictions'],
        'fuelTypes': value['fuelTypes'],
        'emissionStandards': value['emissionStandards'] == null ? undefined : ((value['emissionStandards'] as Array<any>).map(EmissionStandardToJSON)),
        'vehicleAttributes': value['vehicleAttributes'],
    };
}

